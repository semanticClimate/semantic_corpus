[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "semantic_corpus"
version = "0.1.0a1"
description = "Creation and management of personal scientific corpora, often created by downloading from Open repositories"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "Apache-2.0"}
authors = [
    {name = "Semantic Climate", email = "contact@semanticclimate.org"},
]
keywords = ["scientific", "corpus", "papers", "research", "metadata"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Text Processing",
]

dependencies = [
    "requests>=2.25.0",
    "beautifulsoup4>=4.9.0",
    "lxml>=4.6.0",
    "tqdm>=4.60.0",
    "coloredlogs>=15.0",
    "configargparse>=1.5.0",
    "pyyaml>=6.0.0",
    "pathlib2>=2.3.0; python_version < '3.4'",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]

[project.urls]
Homepage = "https://github.com/semanticClimate/semantic_corpus"
Repository = "https://github.com/semanticClimate/semantic_corpus"
Documentation = "https://semanticclimate.github.io/semantic_corpus"
"Bug Tracker" = "https://github.com/semanticClimate/semantic_corpus/issues"

[project.scripts]
semantic_corpus = "semantic_corpus.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["semantic_corpus*"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config -m 'not arxiv'"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "live_api: marks tests that use live APIs and real downloads",
    "network: marks tests that require network access",
    "arxiv: marks tests that use arXiv repository (skipped by default)",
]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["semantic_corpus"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "requests.*",
    "bs4.*",
    "lxml.*",
    "tqdm.*",
    "coloredlogs.*",
    "configargparse.*",
]
ignore_missing_imports = true
